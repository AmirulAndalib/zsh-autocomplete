#!/bin/zsh
zmodload -F zsh/terminfo p:terminfo

.autocomplete.key.set() {
  if [[ -z $key[$1] ]]; then
    key[$1]="$terminfo[$3]"; [[ -n $key[$1] && -v terminfo[smkx] ]] ||
      key[$1]="$2"
  fi
}

emulate -L zsh -o extendedglob

if [[ ! -v key || ${(t)key} != association ]]; then
  unset key
  # This file can be generated interactively with `autoload -Uz zkbd && zkbd`.
  # See http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Keyboard-Definition
  local zkbd=${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR
  [[ -r $zkbd ]] &&
    source $zkbd

  [[ -v key ]] ||
    typeset -gA key=()
fi

.autocomplete.key.set Return $'\C-M' cr
.autocomplete.key.set Tab $'\C-I' ht
.autocomplete.key.set BackTab $'\C-[[Z' kcbt
.autocomplete.key.set Up $'\C-[[A' kcuu1
.autocomplete.key.set Down $'\C-[[B' kcud1
.autocomplete.key.set Right $'\C-[[C' kcuf1
.autocomplete.key.set Left $'\C-[[D' kcub1
.autocomplete.key.set End $'\C-[[F' kend
.autocomplete.key.set Home $'\C-[[H' khome
.autocomplete.key.set PageUp $'\C-[[5~' kpp
.autocomplete.key.set PageDown $'\C-[[6~' knp

# These are not defined in `terminfo`.
.autocomplete.key.set Alt $'\C-['
.autocomplete.key.set ControlSpace $'\C-@'
.autocomplete.key.set DeleteList $'\C-D'
.autocomplete.key.set BeginningOfBuffer $'\C-[<'
.autocomplete.key.set EndOfBuffer $'\C-[>'

case $( bindkey -lL main ) in
  *emacs*)
    .autocomplete.key.set Undo '^_'
    .autocomplete.key.set ForwardWord $'\C-[f'
    .autocomplete.key.set BackwardWord $'\C-[b'
    ;;
  *vi*)
    .autocomplete.key.set Undo $'\C-[u'
    .autocomplete.key.set ForwardWord $'\C-[W'
    .autocomplete.key.set BackwardWord $'\C-[B'
    ;;
esac

.autocomplete.key.precmd() {
  zmodload -F zsh/terminfo p:terminfo

  # Use terminfo codes, if possible.
  if [[ -v terminfo[smkx] ]]; then
    zmodload -Fa zsh/terminfo b:echoti
    builtin autoload -Uz add-zle-hook-widget

    .autocomplete.key.line-init() {
      echoti smkx  # Switch to application mode.
    }
    add-zle-hook-widget line-init .autocomplete.key.line-init

    if [[ -v terminfo[rmkx] ]]; then
      .autocomplete.key.line-finish() {
        echoti rmkx  # Switch to raw mode.
      }
      add-zle-hook-widget line-finish .autocomplete.key.line-finish
    fi
  fi
}

add-zsh-hook precmd .autocomplete.key.precmd
