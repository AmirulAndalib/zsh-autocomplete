#!/bin/zsh
emulate -LR zsh -o noshortloops -o warncreateglobal -o extendedglob

# Make `terminfo` codes work.
add-zle-hook-widget line-init .autocomplete.key.line-init
add-zle-hook-widget line-finish .autocomplete.key.line-finish

add-zsh-hook precmd .autocomplete.key.precmd

.autocomplete.key.line-init() {
  emulate -LR zsh -o noshortloops -o warncreateglobal -o extendedglob
  echoti smkx  # Switch to application mode.
}

.autocomplete.key.line-finish() {
  emulate -LR zsh -o noshortloops -o warncreateglobal -o extendedglob
  echoti rmkx  # Switch to raw mode.
}

.autocomplete.key.set() {
  if [[ -z $key[$1] ]]; then
    if [[ -n $terminfo[$3] ]]; then key[$1]=$terminfo[$3]; else key[$1]=$2; fi
  fi
}

.autocomplete.key.precmd() {
  emulate -LR zsh -o noshortloops -o warncreateglobal -o extendedglob
  add-zsh-hook -d precmd .autocomplete.key.precmd

  if [[ ! -v key ]]; then
    # This file can be generated interactively with `autoload -Uz zkbd && zkbd`.
    # See http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Keyboard-Definition
    local zkbd=${ZDOTDIR:-$HOME}/.zkbd/${TERM}-${VENDOR}
    [[ -r $zkbd ]] && source $zkbd

    [[ -v key ]] || typeset -g -A key
  fi

  zmodload -i zsh/terminfo

  .autocomplete.key.set Tab '^I' ht
  .autocomplete.key.set BackTab '^[[Z' kcbt
  .autocomplete.key.set Left '^B' kcub1
  .autocomplete.key.set Right '^F' kcuf1
  .autocomplete.key.set Home '^A' khome
  .autocomplete.key.set End '^E' kend
  .autocomplete.key.set Up '^P' kcuu1
  .autocomplete.key.set Down '^N' kcud1
  .autocomplete.key.set PageUp '^[v' kpp
  .autocomplete.key.set PageDown '^V' knp

  # These are not defined in `terminfo`.
  .autocomplete.key.set ControlSpace '^@'
  .autocomplete.key.set LineFeed '^J'
  .autocomplete.key.set Return '^M'
  .autocomplete.key.set DeleteList '^D'
  .autocomplete.key.set BeginningOfBuffer '^[<'
  .autocomplete.key.set EndOfBuffer '^[>'

  case $( bindkey -lL main ) in
    *emacs*)
      .autocomplete.key.set Undo '^_' kund
      .autocomplete.key.set ForwardWord '^[f'
      .autocomplete.key.set BackwardWord '^[b'
      ;;
    *vi*)
      .autocomplete.key.set Undo '^[u' kund
      .autocomplete.key.set ForwardWord '^[W'
      .autocomplete.key.set BackwardWord '^[B'
      ;;
  esac
}
